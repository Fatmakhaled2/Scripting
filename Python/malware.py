from cryptography.fernet import Fernet

# Function to generate and save a key
def generate_key():
    key = Fernet.generate_key()
    with open("secret.key", "wb") as key_file:
        key_file.write(key)
    print("Encryption key generated and saved to 'secret.key'.")

# Function to load the key from the file
def load_key():
    try:
        with open("secret.key", "rb") as key_file:
            return key_file.read()
    except FileNotFoundError:
        print("Key file not found! Please generate a key first.")
        exit()

# Function to encrypt a file
def encrypt_file(file_path):
    key = load_key()
    fernet = Fernet(key)

    try:
        with open(file_path, "rb") as file:
            data = file.read()

        encrypted_data = fernet.encrypt(data)

        with open(file_path + ".encrypted", "wb") as encrypted_file:
            encrypted_file.write(encrypted_data)
        
        print(f"File '{file_path}' has been encrypted to '{file_path}.encrypted'.")
    except FileNotFoundError:
        print(f"File '{file_path}' not found.")

# Function to decrypt a file
def decrypt_file(encrypted_file_path):
    key = load_key()
    fernet = Fernet(key)

    try:
        with open(encrypted_file_path, "rb") as encrypted_file:
            encrypted_data = encrypted_file.read()

        decrypted_data = fernet.decrypt(encrypted_data)

        original_file_path = encrypted_file_path.replace(".encrypted", "")
        with open(original_file_path, "wb") as original_file:
            original_file.write(decrypted_data)
        
        print(f"File '{encrypted_file_path}' has been decrypted to '{original_file_path}'.")
    except FileNotFoundError:
        print(f"File '{encrypted_file_path}' not found.")
    except Exception as e:
        print(f"An error occurred during decryption: {e}")


print("File Encryption and Decryption")
print("1. Generate Key")
print("2. Encrypt File")
print("3. Decrypt File")
print("4. Exit")

while True:
    choice = input("\nChoose an option: ")
    if choice == "1":
        generate_key()
    elif choice == "2":
        file_path = input("Enter the file path to encrypt: ")
        encrypt_file(file_path)
    elif choice == "3":
        encrypted_file_path = input("Enter the encrypted file path to decrypt: ")
        decrypt_file(encrypted_file_path)
    elif choice == "4":
        print("Exiting...")
        break
    else:
        print("Invalid choice! Please try again.")
